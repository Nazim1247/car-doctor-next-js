{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/lib/dbConnect.js"],"sourcesContent":["import { MongoClient, ServerApiVersion } from 'mongodb';\r\n\r\nexport const collectionNameObj = {\r\n    servicesCollection: 'test-services',\r\n    userCollection: 'test-user'\r\n}\r\n\r\nconst uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PUSS}@cluster0.9njqe.mongodb.net/?appName=Cluster0`;\r\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\r\n\r\nexport default function dbConnect (collectionName){\r\n    const client = new MongoClient(uri, {\r\n        serverApi: {\r\n          version: ServerApiVersion.v1,\r\n          strict: true,\r\n          deprecationErrors: true,\r\n        }\r\n      });\r\n      return client.db('car-doctor').collection(collectionName)\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,oBAAoB;IAC7B,oBAAoB;IACpB,gBAAgB;AACpB;AAEA,MAAM,MAAM,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,6CAA6C,CAAC;AAGvG,SAAS,UAAW,cAAc;IAC7C,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAChC,WAAW;YACT,SAAS,uGAAA,CAAA,mBAAgB,CAAC,EAAE;YAC5B,QAAQ;YACR,mBAAmB;QACrB;IACF;IACA,OAAO,OAAO,EAAE,CAAC,cAAc,UAAU,CAAC;AAChD","debugId":null}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/app/actions/auth/loginUser.js"],"sourcesContent":["\"use server\";\r\n\r\nimport dbConnect, { collectionNameObj } from \"@/lib/dbConnect\";\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const loginUser = async (payload)=>{\r\n    // console.log('payload',payload)\r\n    const {email,password}= payload;\r\n    const userCollection = dbConnect(collectionNameObj.userCollection);\r\n    const user = await userCollection.findOne({email});\r\n    if(!user) return null;\r\n\r\n    const isPasswordOk = await bcrypt.compare(password,user.password);\r\n    if(!isPasswordOk) return null;\r\n\r\n    return user;\r\n}"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEO,MAAM,uCAAO,GAAP,YAAY,OAAO;IAC5B,iCAAiC;IACjC,MAAM,EAAC,KAAK,EAAC,QAAQ,EAAC,GAAE;IACxB,MAAM,iBAAiB,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD,EAAE,yHAAA,CAAA,oBAAiB,CAAC,cAAc;IACjE,MAAM,OAAO,MAAM,eAAe,OAAO,CAAC;QAAC;IAAK;IAChD,IAAG,CAAC,MAAM,OAAO;IAEjB,MAAM,eAAe,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAS,KAAK,QAAQ;IAChE,IAAG,CAAC,cAAc,OAAO;IAEzB,OAAO;AACX;;;IAXa;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["\r\nimport { loginUser } from \"@/app/actions/auth/loginUser\";\r\nimport NextAuth from \"next-auth\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n\r\nexport const authOptions = {\r\n    // Configure one or more authentication providers\r\n    providers: [\r\n        CredentialsProvider({\r\n          // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n          name: \"Credentials\",\r\n          // `credentials` is used to generate a form on the sign in page.\r\n          // You can specify which fields should be submitted, by adding keys to the `credentials` object.\r\n          // e.g. domain, username, password, 2FA token, etc.\r\n          // You can pass any HTML attribute to the <input> tag through the object.\r\n          credentials: {\r\n            email: { label: \"Email\", type: \"email\", placeholder: \"Enter Email\" },\r\n            password: { label: \"Password\", type: \"password\" }\r\n          },\r\n          async authorize(credentials, req) {\r\n            // console.log('credentials',credentials)\r\n            // Add logic here to look up the user from the credentials supplied\r\n            const user = await loginUser(credentials)\r\n            // console.log('user',user)\r\n      \r\n            if (user) {\r\n              // Any object returned will be saved in `user` property of the JWT\r\n              return user\r\n            } else {\r\n              // If you return null then an error will be displayed advising the user to check their details.\r\n              return null\r\n      \r\n              // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\r\n            }\r\n          }\r\n        })\r\n      ],\r\n      pages: {\r\n        signIn: '/login'\r\n      }\r\n  }\r\n  \r\n\r\nconst handler = NextAuth(authOptions)\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;AAEO,MAAM,cAAc;IACvB,iDAAiD;IACjD,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,mEAAmE;YACnE,MAAM;YACN,gEAAgE;YAChE,gGAAgG;YAChG,mDAAmD;YACnD,yEAAyE;YACzE,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAc;gBACnE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC9B,yCAAyC;gBACzC,mEAAmE;gBACnE,MAAM,OAAO,MAAM,CAAA,GAAA,4IAAA,CAAA,YAAS,AAAD,EAAE;gBAC7B,2BAA2B;gBAE3B,IAAI,MAAM;oBACR,kEAAkE;oBAClE,OAAO;gBACT,OAAO;oBACL,+FAA+F;oBAC/F,OAAO;gBAEP,2IAA2I;gBAC7I;YACF;QACF;KACD;IACD,OAAO;QACL,QAAQ;IACV;AACJ;AAGF,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}