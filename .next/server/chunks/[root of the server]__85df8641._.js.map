{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/lib/dbConnect.js"],"sourcesContent":["import { MongoClient, ServerApiVersion } from 'mongodb';\r\n\r\nexport const collectionNameObj = {\r\n    servicesCollection: 'test-services',\r\n    userCollection: 'test-user',\r\n    bookingCollection: 'test-booking',\r\n}\r\n\r\nconst uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PUSS}@cluster0.9njqe.mongodb.net/?appName=Cluster0`;\r\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\r\n\r\nexport default function dbConnect (collectionName){\r\n    const client = new MongoClient(uri, {\r\n        serverApi: {\r\n          version: ServerApiVersion.v1,\r\n          strict: true,\r\n          deprecationErrors: true,\r\n        }\r\n      });\r\n      return client.db('car-doctor').collection(collectionName)\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,oBAAoB;IAC7B,oBAAoB;IACpB,gBAAgB;IAChB,mBAAmB;AACvB;AAEA,MAAM,MAAM,CAAC,cAAc,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,OAAO,CAAC,6CAA6C,CAAC;AAGvG,SAAS,UAAW,cAAc;IAC7C,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAChC,WAAW;YACT,SAAS,uGAAA,CAAA,mBAAgB,CAAC,EAAE;YAC5B,QAAQ;YACR,mBAAmB;QACrB;IACF;IACA,OAAO,OAAO,EAAE,CAAC,cAAc,UAAU,CAAC;AAChD","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/app/actions/auth/loginUser.js"],"sourcesContent":["\"use server\";\r\n\r\nimport dbConnect, { collectionNameObj } from \"@/lib/dbConnect\";\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport const loginUser = async (payload)=>{\r\n    // console.log('payload',payload)\r\n    const {email,password}= payload;\r\n    const userCollection = dbConnect(collectionNameObj.userCollection);\r\n    const user = await userCollection.findOne({email});\r\n    if(!user) return null;\r\n\r\n    const isPasswordOk = await bcrypt.compare(password,user.password);\r\n    if(!isPasswordOk) return null;\r\n\r\n    return user;\r\n}"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AAEO,MAAM,uCAAO,GAAP,YAAY,OAAO;IAC5B,iCAAiC;IACjC,MAAM,EAAC,KAAK,EAAC,QAAQ,EAAC,GAAE;IACxB,MAAM,iBAAiB,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD,EAAE,yHAAA,CAAA,oBAAiB,CAAC,cAAc;IACjE,MAAM,OAAO,MAAM,eAAe,OAAO,CAAC;QAAC;IAAK;IAChD,IAAG,CAAC,MAAM,OAAO;IAEjB,MAAM,eAAe,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAS,KAAK,QAAQ;IAChE,IAAG,CAAC,cAAc,OAAO;IAEzB,OAAO;AACX;;;IAXa;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/lib/authOptions.js"],"sourcesContent":["import { loginUser } from \"@/app/actions/auth/loginUser\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport dbConnect, { collectionNameObj } from \"./dbConnect\";\r\n\r\nexport const authOptions = {\r\n    // Configure one or more authentication providers\r\n    providers: [\r\n        CredentialsProvider({\r\n          // The name to display on the sign in form (e.g. \"Sign in with...\")\r\n          name: \"Credentials\",\r\n          // `credentials` is used to generate a form on the sign in page.\r\n          // You can specify which fields should be submitted, by adding keys to the `credentials` object.\r\n          // e.g. domain, username, password, 2FA token, etc.\r\n          // You can pass any HTML attribute to the <input> tag through the object.\r\n          credentials: {\r\n            email: { label: \"Email\", type: \"email\", placeholder: \"Enter Email\" },\r\n            password: { label: \"Password\", type: \"password\" }\r\n          },\r\n          async authorize(credentials, req) {\r\n            // console.log('credentials',credentials)\r\n            // Add logic here to look up the user from the credentials supplied\r\n            const user = await loginUser(credentials)\r\n            // console.log('user',user)\r\n      \r\n            if (user) {\r\n              // Any object returned will be saved in `user` property of the JWT\r\n              return user\r\n            } else {\r\n              // If you return null then an error will be displayed advising the user to check their details.\r\n              return null\r\n      \r\n              // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\r\n            }\r\n          }\r\n        }),\r\n        GoogleProvider({\r\n          clientId: process.env.GOOGLE_CLIENT_ID,\r\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET\r\n        })\r\n      ],\r\n      secret: process.env.NEXTAUTH_SECRET,\r\n      pages: {\r\n        signIn: '/login'\r\n      },\r\n      callbacks:{\r\n        async signIn({ user, account, profile, email, credentials }) {\r\n            console.log({ user, account, profile, email, credentials })\r\n            if(account){\r\n                const {providerAccountId,provider}= account\r\n                const {email: user_email,image,name}=user\r\n\r\n                const userCollection = dbConnect(collectionNameObj.userCollection)\r\n                const isExisted = await userCollection.findOne({providerAccountId})\r\n                if(!isExisted){\r\n                    const payload = {providerAccountId,provider,email:user_email,image,name}\r\n                    await userCollection.insertOne(payload)\r\n                }\r\n            }\r\n            return true\r\n          },\r\n      }\r\n  }\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,cAAc;IACvB,iDAAiD;IACjD,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,mEAAmE;YACnE,MAAM;YACN,gEAAgE;YAChE,gGAAgG;YAChG,mDAAmD;YACnD,yEAAyE;YACzE,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;oBAAS,aAAa;gBAAc;gBACnE,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC9B,yCAAyC;gBACzC,mEAAmE;gBACnE,MAAM,OAAO,MAAM,CAAA,GAAA,4IAAA,CAAA,YAAS,AAAD,EAAE;gBAC7B,2BAA2B;gBAE3B,IAAI,MAAM;oBACR,kEAAkE;oBAClE,OAAO;gBACT,OAAO;oBACL,+FAA+F;oBAC/F,OAAO;gBAEP,2IAA2I;gBAC7I;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;IACV;IACA,WAAU;QACR,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACvD,QAAQ,GAAG,CAAC;gBAAE;gBAAM;gBAAS;gBAAS;gBAAO;YAAY;YACzD,IAAG,SAAQ;gBACP,MAAM,EAAC,iBAAiB,EAAC,QAAQ,EAAC,GAAE;gBACpC,MAAM,EAAC,OAAO,UAAU,EAAC,KAAK,EAAC,IAAI,EAAC,GAAC;gBAErC,MAAM,iBAAiB,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD,EAAE,yHAAA,CAAA,oBAAiB,CAAC,cAAc;gBACjE,MAAM,YAAY,MAAM,eAAe,OAAO,CAAC;oBAAC;gBAAiB;gBACjE,IAAG,CAAC,WAAU;oBACV,MAAM,UAAU;wBAAC;wBAAkB;wBAAS,OAAM;wBAAW;wBAAM;oBAAI;oBACvE,MAAM,eAAe,SAAS,CAAC;gBACnC;YACJ;YACA,OAAO;QACT;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file://C%3A/projects/next-js-car-doctor/src/app/api/my-bookings/%5Bid%5D/route.js"],"sourcesContent":["import { authOptions } from \"@/lib/authOptions\";\r\nimport dbConnect, { collectionNameObj } from \"@/lib/dbConnect\";\r\nimport { ObjectId } from \"mongodb\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { revalidatePath } from \"next/cache\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport const GET = async (req,{params})=>{\r\n    const p = await params;\r\n    const bookingCollection = dbConnect(collectionNameObj.bookingCollection);\r\n    const query = {_id: new ObjectId(p.id)};\r\n    // validation\r\n    const session = await getServerSession(authOptions);\r\n    const email = session?.user?.email;\r\n    const singleBooking = await bookingCollection.findOne(query);\r\n    const isOwnerOk = email === singleBooking?.email;\r\n    if(isOwnerOk){\r\n        return NextResponse.json(singleBooking);\r\n    }else{\r\n        return NextResponse.json({message: 'Forbidden get Action'},{status:403});\r\n    }\r\n}\r\n\r\nexport const PATCH = async(req,{params})=>{\r\n    const p = await params;\r\n    const bookingCollection = dbConnect(collectionNameObj.bookingCollection);\r\n    const query = {_id: new ObjectId(p.id)};\r\n    // validation\r\n    const session = await getServerSession(authOptions);\r\n    const email = session?.user?.email;\r\n    const currentBookingData = await bookingCollection.findOne(query);\r\n    const isOwnerOk = email === currentBookingData?.email;\r\n    if(isOwnerOk){\r\n        const body = await req.json();\r\n    const filter = {\r\n        $set: {...body}\r\n    }\r\n    const option = {\r\n        upsert: true\r\n    }\r\n    const updateResponse = await bookingCollection.updateOne(query,filter,option);\r\n    revalidatePath('/my-bookings')\r\n    return NextResponse.json(updateResponse);\r\n    }else{\r\n        return NextResponse.json({message: 'Forbidden Update Action'},{status:403});\r\n    }\r\n    \r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,MAAM,OAAO,KAAI,EAAC,MAAM,EAAC;IAClC,MAAM,IAAI,MAAM;IAChB,MAAM,oBAAoB,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD,EAAE,yHAAA,CAAA,oBAAiB,CAAC,iBAAiB;IACvE,MAAM,QAAQ;QAAC,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC,EAAE,EAAE;IAAC;IACtC,aAAa;IACb,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,2HAAA,CAAA,cAAW;IAClD,MAAM,QAAQ,SAAS,MAAM;IAC7B,MAAM,gBAAgB,MAAM,kBAAkB,OAAO,CAAC;IACtD,MAAM,YAAY,UAAU,eAAe;IAC3C,IAAG,WAAU;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,OAAK;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAsB,GAAE;YAAC,QAAO;QAAG;IAC1E;AACJ;AAEO,MAAM,QAAQ,OAAM,KAAI,EAAC,MAAM,EAAC;IACnC,MAAM,IAAI,MAAM;IAChB,MAAM,oBAAoB,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD,EAAE,yHAAA,CAAA,oBAAiB,CAAC,iBAAiB;IACvE,MAAM,QAAQ;QAAC,KAAK,IAAI,uGAAA,CAAA,WAAQ,CAAC,EAAE,EAAE;IAAC;IACtC,aAAa;IACb,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,2HAAA,CAAA,cAAW;IAClD,MAAM,QAAQ,SAAS,MAAM;IAC7B,MAAM,qBAAqB,MAAM,kBAAkB,OAAO,CAAC;IAC3D,MAAM,YAAY,UAAU,oBAAoB;IAChD,IAAG,WAAU;QACT,MAAM,OAAO,MAAM,IAAI,IAAI;QAC/B,MAAM,SAAS;YACX,MAAM;gBAAC,GAAG,IAAI;YAAA;QAClB;QACA,MAAM,SAAS;YACX,QAAQ;QACZ;QACA,MAAM,iBAAiB,MAAM,kBAAkB,SAAS,CAAC,OAAM,QAAO;QACtE,CAAA,GAAA,+HAAA,CAAA,iBAAc,AAAD,EAAE;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IACzB,OAAK;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAyB,GAAE;YAAC,QAAO;QAAG;IAC7E;AAEJ","debugId":null}}]
}